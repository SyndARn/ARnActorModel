using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Actor.Base;
using Actor.Util;
using System.Collections.Concurrent;

namespace WpfPrime.Prime
{

    public class localdata
    {
        public Dictionary<Tuple<Int64, Int64>, Int64> dico;
        public localdata()
        {
            dico = new Dictionary<Tuple<Int64, Int64>, Int64>();
            string[] somestring =
{
"K:10 N:2 S:3",
"K:10 N:3 S:4",
"K:10 N:4 S:5",
"K:10 N:5 S:6",
"K:10 N:6 S:7",
"K:10 N:7 S:8",
"K:10 N:8 S:9",
"K:10 N:9 S:10",
"K:10 N:10 S:12",
"K:10 N:11 S:14",
"K:10 N:12 S:16",
"K:10 N:13 S:18",
"K:10 N:14 S:20",
"K:10 N:15 S:22",
"K:10 N:16 S:24",
"K:10 N:17 S:26",
"K:10 N:18 S:28",
"K:10 N:19 S:30",
"K:10 N:20 S:33",
"K:10 N:21 S:36",
"K:10 N:22 S:39",
"K:10 N:23 S:42",
"K:10 N:24 S:45",
"K:10 N:25 S:48",
"K:10 N:26 S:51",
"K:10 N:27 S:54",
"K:10 N:28 S:57",
"K:10 N:29 S:60",
"K:10 N:30 S:64",
"K:10 N:31 S:68",
"K:10 N:32 S:72",
"K:10 N:33 S:76",
"K:10 N:34 S:80",
"K:10 N:35 S:84",
"K:10 N:36 S:88",
"K:10 N:37 S:92",
"K:10 N:38 S:96",
"K:10 N:39 S:100",
"K:10 N:40 S:105",
"K:10 N:41 S:110",
"K:10 N:42 S:115",
"K:10 N:43 S:120",
"K:10 N:44 S:125",
"K:10 N:45 S:130",
"K:10 N:46 S:135",
"K:10 N:47 S:140",
"K:10 N:48 S:145",
"K:10 N:49 S:150",
"K:10 N:50 S:156",
"K:10 N:51 S:162",
"K:10 N:52 S:168",
"K:10 N:53 S:174",
"K:10 N:54 S:180",
"K:10 N:55 S:186",
"K:10 N:56 S:192",
"K:10 N:57 S:198",
"K:10 N:58 S:204",
"K:10 N:59 S:210",
"K:10 N:60 S:217",
"K:10 N:61 S:224",
"K:10 N:62 S:231",
"K:10 N:63 S:238",
"K:10 N:64 S:245",
"K:10 N:65 S:252",
"K:10 N:66 S:259",
"K:10 N:67 S:266",
"K:10 N:68 S:273",
"K:10 N:69 S:280",
"K:10 N:70 S:288",
"K:10 N:71 S:296",
"K:10 N:72 S:304",
"K:10 N:73 S:312",
"K:10 N:74 S:320",
"K:10 N:75 S:328",
"K:10 N:76 S:336",
"K:10 N:77 S:344",
"K:10 N:78 S:352",
"K:10 N:79 S:360",
"K:10 N:80 S:369",
"K:10 N:81 S:378",
"K:10 N:82 S:387",
"K:10 N:83 S:396",
"K:10 N:84 S:405",
"K:10 N:85 S:414",
"K:10 N:86 S:423",
"K:10 N:87 S:432",
"K:10 N:88 S:441",
"K:10 N:89 S:450",
"K:10 N:90 S:460",
"K:10 N:91 S:470",
"K:10 N:92 S:480",
"K:10 N:93 S:490",
"K:10 N:94 S:500",
"K:10 N:95 S:510",
"K:10 N:96 S:520",
"K:10 N:97 S:530",
"K:10 N:98 S:540",
"K:10 N:99 S:550",
"K:10 N:100 S:562",
"K:10 N:101 S:574",
"K:10 N:102 S:586",
"K:10 N:103 S:598",
"K:10 N:104 S:610",
"K:10 N:105 S:622",
"K:10 N:106 S:634",
"K:10 N:107 S:646",
"K:10 N:108 S:658",
"K:10 N:109 S:670",
"K:10 N:110 S:684",
"K:10 N:111 S:698",
"K:10 N:112 S:712",
"K:10 N:113 S:726",
"K:10 N:114 S:740",
"K:10 N:115 S:754",
"K:10 N:116 S:768",
"K:10 N:117 S:782",
"K:10 N:118 S:796",
"K:10 N:119 S:810",
"K:10 N:120 S:826",
"K:10 N:121 S:842",
"K:10 N:122 S:858",
"K:10 N:123 S:874",
"K:10 N:124 S:890",
"K:10 N:125 S:906",
"K:10 N:126 S:922",
"K:10 N:127 S:938",
"K:10 N:128 S:954",
"K:10 N:129 S:970",
"K:10 N:130 S:988",
"K:10 N:131 S:1006",
"K:10 N:132 S:1024",
"K:10 N:133 S:1042",
"K:10 N:134 S:1060",
"K:10 N:135 S:1078",
"K:10 N:136 S:1096",
"K:10 N:137 S:1114",
"K:10 N:138 S:1132",
"K:10 N:139 S:1150",
"K:10 N:140 S:1170",
"K:10 N:141 S:1190",
"K:10 N:142 S:1210",
"K:10 N:143 S:1230",
"K:10 N:144 S:1250",
"K:10 N:145 S:1270",
"K:10 N:146 S:1290",
"K:10 N:147 S:1310",
"K:10 N:148 S:1330",
"K:10 N:149 S:1350",
"K:10 N:150 S:1372",
"K:10 N:151 S:1394",
"K:10 N:152 S:1416",
"K:10 N:153 S:1438",
"K:10 N:154 S:1460",
"K:10 N:155 S:1482",
"K:10 N:156 S:1504",
"K:10 N:157 S:1526",
"K:10 N:158 S:1548",
"K:10 N:159 S:1570",
"K:10 N:160 S:1594",
"K:10 N:161 S:1618",
"K:10 N:162 S:1642",
"K:10 N:163 S:1666",
"K:10 N:164 S:1690",
"K:10 N:165 S:1714",
"K:10 N:166 S:1738",
"K:10 N:167 S:1762",
"K:10 N:168 S:1786",
"K:10 N:169 S:1810",
"K:10 N:170 S:1836",
"K:10 N:171 S:1862",
"K:10 N:172 S:1888",
"K:10 N:173 S:1914",
"K:10 N:174 S:1940",
"K:10 N:175 S:1966",
"K:10 N:176 S:1992",
"K:10 N:177 S:2018",
"K:10 N:178 S:2044",
"K:10 N:179 S:2070",
"K:10 N:180 S:2098",
"K:10 N:181 S:2126",
"K:10 N:182 S:2154",
"K:10 N:183 S:2182",
"K:10 N:184 S:2210",
"K:10 N:185 S:2238",
"K:10 N:186 S:2266",
"K:10 N:187 S:2294",
"K:10 N:188 S:2322",
"K:10 N:189 S:2350",
"K:10 N:190 S:2380",
"K:10 N:191 S:2410",
"K:10 N:192 S:2440",
"K:10 N:193 S:2470",
"K:10 N:194 S:2500",
"K:10 N:195 S:2530",
"K:10 N:196 S:2560",
"K:10 N:197 S:2590",
"K:10 N:198 S:2620",
"K:10 N:199 S:2650",
"K:10 N:200 S:2683",
"K:10 N:201 S:2716",
"K:10 N:202 S:2749",
"K:10 N:203 S:2782",
"K:10 N:204 S:2815",
"K:10 N:205 S:2848",
"K:10 N:206 S:2881",
"K:10 N:207 S:2914",
"K:10 N:208 S:2947",
"K:10 N:209 S:2980",
"K:10 N:210 S:3016",
"K:10 N:211 S:3052",
"K:10 N:212 S:3088",
"K:10 N:213 S:3124",
"K:10 N:214 S:3160",
"K:10 N:215 S:3196",
"K:10 N:216 S:3232",
"K:10 N:217 S:3268",
"K:10 N:218 S:3304",
"K:10 N:219 S:3340",
"K:10 N:220 S:3379",
"K:10 N:221 S:3418",
"K:10 N:222 S:3457",
"K:10 N:223 S:3496",
"K:10 N:224 S:3535",
"K:10 N:225 S:3574",
"K:10 N:226 S:3613",
"K:10 N:227 S:3652",
"K:10 N:228 S:3691",
"K:10 N:229 S:3730",
"K:10 N:230 S:3772",
"K:10 N:231 S:3814",
"K:10 N:232 S:3856",
"K:10 N:233 S:3898",
"K:10 N:234 S:3940",
"K:10 N:235 S:3982",
"K:10 N:236 S:4024",
"K:10 N:237 S:4066",
"K:10 N:238 S:4108",
"K:10 N:239 S:4150",
"K:10 N:240 S:4195",
"K:10 N:241 S:4240",
"K:10 N:242 S:4285",
"K:10 N:243 S:4330",
"K:10 N:244 S:4375",
"K:10 N:245 S:4420",
"K:10 N:246 S:4465",
"K:10 N:247 S:4510",
"K:10 N:248 S:4555",
"K:10 N:249 S:4600",
"K:10 N:250 S:4648",
"K:10 N:251 S:4696",
"K:10 N:252 S:4744",
"K:10 N:253 S:4792",
"K:10 N:254 S:4840",
"K:10 N:255 S:4888",
"K:10 N:256 S:4936",
"K:10 N:257 S:4984",
"K:10 N:258 S:5032",
"K:10 N:259 S:5080",
"K:10 N:260 S:5131",
"K:10 N:261 S:5182",
"K:10 N:262 S:5233",
"K:10 N:263 S:5284",
"K:10 N:264 S:5335",
"K:10 N:265 S:5386",
"K:10 N:266 S:5437",
"K:10 N:267 S:5488",
"K:10 N:268 S:5539",
"K:10 N:269 S:5590",
"K:10 N:270 S:5644",
"K:10 N:271 S:5698",
"K:10 N:272 S:5752",
"K:10 N:273 S:5806",
"K:10 N:274 S:5860",
"K:10 N:275 S:5914",
"K:10 N:276 S:5968",
"K:10 N:277 S:6022",
"K:10 N:278 S:6076",
"K:10 N:279 S:6130",
"K:10 N:280 S:6187",
"K:10 N:281 S:6244",
"K:10 N:282 S:6301",
"K:10 N:283 S:6358",
"K:10 N:284 S:6415",
"K:10 N:285 S:6472",
"K:10 N:286 S:6529",
"K:10 N:287 S:6586",
"K:10 N:288 S:6643",
"K:10 N:289 S:6700",
"K:10 N:290 S:6760",
"K:10 N:291 S:6820",
"K:10 N:292 S:6880",
"K:10 N:293 S:6940",
"K:10 N:294 S:7000",
"K:10 N:295 S:7060",
"K:10 N:296 S:7120",
"K:10 N:297 S:7180",
"K:10 N:298 S:7240",
"K:10 N:299 S:7300",
"K:10 N:300 S:7364",
"K:10 N:301 S:7428",
"K:10 N:302 S:7492",
"K:10 N:303 S:7556",
"K:10 N:304 S:7620",
"K:10 N:305 S:7684",
"K:10 N:306 S:7748",
"K:10 N:307 S:7812",
"K:10 N:308 S:7876",
"K:10 N:309 S:7940",
"K:10 N:310 S:8008",
"K:10 N:311 S:8076",
"K:10 N:312 S:8144",
"K:10 N:313 S:8212",
"K:10 N:314 S:8280",
"K:10 N:315 S:8348",
"K:10 N:316 S:8416",
"K:10 N:317 S:8484",
"K:10 N:318 S:8552",
"K:10 N:319 S:8620",
"K:10 N:320 S:8692",
"K:10 N:321 S:8764",
"K:10 N:322 S:8836",
"K:10 N:323 S:8908",
"K:10 N:324 S:8980",
"K:10 N:325 S:9052",
"K:10 N:326 S:9124",
"K:10 N:327 S:9196",
"K:10 N:328 S:9268",
"K:10 N:329 S:9340",
"K:10 N:330 S:9416",
"K:10 N:331 S:9492",
"K:10 N:332 S:9568",
"K:10 N:333 S:9644",
"K:10 N:334 S:9720",
"K:10 N:335 S:9796",
"K:10 N:336 S:9872",
"K:10 N:337 S:9948",
"K:10 N:338 S:10024",
"K:10 N:339 S:10100",
"K:10 N:340 S:10180",
"K:10 N:341 S:10260",
"K:10 N:342 S:10340",
"K:10 N:343 S:10420",
"K:10 N:344 S:10500",
"K:10 N:345 S:10580",
"K:10 N:346 S:10660",
"K:10 N:347 S:10740",
"K:10 N:348 S:10820",
"K:10 N:349 S:10900",
"K:10 N:350 S:10984",
"K:10 N:351 S:11068",
"K:10 N:352 S:11152",
"K:10 N:353 S:11236",
"K:10 N:354 S:11320",
"K:10 N:355 S:11404",
"K:10 N:356 S:11488",
"K:10 N:357 S:11572",
"K:10 N:358 S:11656",
"K:10 N:359 S:11740",
"K:10 N:360 S:11828",
"K:10 N:361 S:11916",
"K:10 N:362 S:12004",
"K:10 N:363 S:12092",
"K:10 N:364 S:12180",
"K:10 N:365 S:12268",
"K:10 N:366 S:12356",
"K:10 N:367 S:12444",
"K:10 N:368 S:12532",
"K:10 N:369 S:12620",
"K:10 N:370 S:12712",
"K:10 N:371 S:12804",
"K:10 N:372 S:12896",
"K:10 N:373 S:12988",
"K:10 N:374 S:13080",
"K:10 N:375 S:13172",
"K:10 N:376 S:13264",
"K:10 N:377 S:13356",
"K:10 N:378 S:13448",
"K:10 N:379 S:13540",
"K:10 N:380 S:13636",
"K:10 N:381 S:13732",
"K:10 N:382 S:13828",
"K:10 N:383 S:13924",
"K:10 N:384 S:14020",
"K:10 N:385 S:14116",
"K:10 N:386 S:14212",
"K:10 N:387 S:14308",
"K:10 N:388 S:14404",
"K:10 N:389 S:14500",
"K:10 N:390 S:14600",
"K:10 N:391 S:14700",
"K:10 N:392 S:14800",
"K:10 N:393 S:14900",
"K:10 N:394 S:15000",
"K:10 N:395 S:15100",
"K:10 N:396 S:15200",
"K:10 N:397 S:15300",
"K:10 N:398 S:15400",
"K:10 N:399 S:15500",
"K:10 N:400 S:15605",
"K:10 N:401 S:15710",
"K:10 N:402 S:15815",
"K:10 N:403 S:15920",
"K:10 N:404 S:16025",
"K:10 N:405 S:16130",
"K:10 N:406 S:16235",
"K:10 N:407 S:16340",
"K:10 N:408 S:16445",
"K:10 N:409 S:16550",
"K:10 N:410 S:16660",
"K:10 N:411 S:16770",
"K:10 N:412 S:16880",
"K:10 N:413 S:16990",
"K:10 N:414 S:17100",
"K:10 N:415 S:17210",
"K:10 N:416 S:17320",
"K:10 N:417 S:17430",
"K:10 N:418 S:17540",
"K:10 N:419 S:17650",
"K:10 N:420 S:17765",
"K:10 N:421 S:17880",
"K:10 N:422 S:17995",
"K:10 N:423 S:18110",
"K:10 N:424 S:18225",
"K:10 N:425 S:18340",
"K:10 N:426 S:18455",
"K:10 N:427 S:18570",
"K:10 N:428 S:18685",
"K:10 N:429 S:18800",
"K:10 N:430 S:18920",
"K:10 N:431 S:19040",
"K:10 N:432 S:19160",
"K:10 N:433 S:19280",
"K:10 N:434 S:19400",
"K:10 N:435 S:19520",
"K:10 N:436 S:19640",
"K:10 N:437 S:19760",
"K:10 N:438 S:19880",
"K:10 N:439 S:20000",
"K:10 N:440 S:20125",
"K:10 N:441 S:20250",
"K:10 N:442 S:20375",
"K:10 N:443 S:20500",
"K:10 N:444 S:20625",
"K:10 N:445 S:20750",
"K:10 N:446 S:20875",
"K:10 N:447 S:21000",
"K:10 N:448 S:21125",
"K:10 N:449 S:21250",
"K:10 N:450 S:21380",
"K:10 N:451 S:21510",
"K:10 N:452 S:21640",
"K:10 N:453 S:21770",
"K:10 N:454 S:21900",
"K:10 N:455 S:22030",
"K:10 N:456 S:22160",
"K:10 N:457 S:22290",
"K:10 N:458 S:22420",
"K:10 N:459 S:22550",
"K:10 N:460 S:22685",
"K:10 N:461 S:22820",
"K:10 N:462 S:22955",
"K:10 N:463 S:23090",
"K:10 N:464 S:23225",
"K:10 N:465 S:23360",
"K:10 N:466 S:23495",
"K:10 N:467 S:23630",
"K:10 N:468 S:23765",
"K:10 N:469 S:23900",
"K:10 N:470 S:24040",
"K:10 N:471 S:24180",
"K:10 N:472 S:24320",
"K:10 N:473 S:24460",
"K:10 N:474 S:24600",
"K:10 N:475 S:24740",
"K:10 N:476 S:24880",
"K:10 N:477 S:25020",
"K:10 N:478 S:25160",
"K:10 N:479 S:25300",
"K:10 N:480 S:25445",
"K:10 N:481 S:25590",
"K:10 N:482 S:25735",
"K:10 N:483 S:25880",
"K:10 N:484 S:26025",
"K:10 N:485 S:26170",
"K:10 N:486 S:26315",
"K:10 N:487 S:26460",
"K:10 N:488 S:26605",
"K:10 N:489 S:26750",
"K:10 N:490 S:26900",
"K:10 N:491 S:27050",
"K:10 N:492 S:27200",
"K:10 N:493 S:27350" };

            foreach (var s in somestring)
            {
                string ks, ns, ss;
                var spl = s.Split(' ');
                ks = spl[0];
                ns = spl[1];
                ss = spl[2];
                Int64 ki = Int64.Parse(ks.Split(':')[1]);
                Int64 ni = Int64.Parse(ns.Split(':')[1]);
                Int64 si = Int64.Parse(ss.Split(':')[1]);
                dico[new Tuple<Int64, Int64>(ki, ni)] = si;
            }

        }
    }

    public class actDico : BaseActor
    {
        private Dictionary<Int64, Int64> fDico = new Dictionary<Int64, Int64>();

        public actDico()
        {
            Become(new Behavior<Tuple<Int64, Int64>>(Add));
            AddBehavior(new Behavior<Tuple<IActor, Int64>>(Get));
        }

        private void Add(Tuple<Int64, Int64> msg)
        {
            fDico[msg.Item1] = msg.Item2;
        }

        private void Get(Tuple<IActor, Int64> msg)
        {
            Int64 val;
            if (fDico.TryGetValue(msg.Item2, out val))
            {
                msg.Item1.SendMessage(new Tuple<Int64, Int64>(msg.Item2, val));
            }
            else
            {
                msg.Item1.SendMessage(new Tuple<Int64, Int64>(msg.Item2, (Int64)0));
            }
        }
    }

    public enum FknOrder { compute, result }

    public class Fkn : BaseActor
    {
        private Int64 fN;
        private Int64 fK;
        private IActor fCaller;
        private Int64 fSum;
        public static IActor dico;
        public static IActor console;
        public static localdata localdico;

        public List<IActor> fList = new List<IActor>();

        public Fkn(IActor act, Int64 k, Int64 n)
        {
            fN = n;
            fK = k;
            fCaller = act;
            fSum = 0;
            if (localdico == null)
            {
                localdico = new localdata();
            }
            if (dico == null)
            {
                dico = new actDico();
            }
            if (console == null)
            {
                console = new ActorConsole();
            }
            Become(new Behavior<FknOrder>(CalcIt));
            SendMessage(FknOrder.compute);
        }

        private Int64 CalcOne(Int64 i)
        {
            Int64 sum = 0;
            if (i == 0)
            {
                sum++;
            }
            else
            {
                int dbl = (int)Math.Floor((double)(i / fK));
                // known value
                if (dbl == 0)
                {
                    sum++;
                }
                else
                if (dbl == 1)
                {
                    sum += 2;
                }
                else
                {
                    Int64 sumout;
                    if (localdico.dico.TryGetValue(new Tuple<Int64, Int64>(fK, dbl), out sumout))
                    {
                        sum += sumout;
                    }
                    else
                    {
                        dico.SendMessage(new Tuple<IActor, Int64>(this, dbl));
                        var rd = (Tuple<Int64, Int64>)Receive(t => t is Tuple<Int64, Int64>).Result;
                        if (rd.Item2 != 0)
                        {
                            sum += rd.Item2;
                        }
                        else
                        {
                            var act = new Fkn(this, fK, dbl);
                            fList.Add(act);
                        }
                    }
                }
            }
            return sum;
        }

        private void CalcIt(FknOrder anOrder)
        {
            List<IActor> aList = new List<IActor>();
            for (Int64 i = 0; i <= fN; i++)
            {
                fSum += CalcOne(i);
            }
            foreach (var item in fList)
            {
                var r = Receive(t => t is Int64);
                fSum += (Int64)r.Result;
            }

            fCaller.SendMessage(fSum);
            dico.SendMessage(new Tuple<Int64, Int64>(fN, fSum));
            console.SendMessage(string.Format("K:{0} N:{1} S:{2}", fK, fN, fSum));
        }
    }

}
